# Kubernetes deployment for Autonomous Quiz Generation System
---
apiVersion: v1
kind: Namespace
metadata:
  name: quiz-generator

---
# ConfigMap for environment variables
apiVersion: v1
kind: ConfigMap
metadata:
  name: quiz-config
  namespace: quiz-generator
data:
  MIN_QUALITY_SCORE: "0.75"
  AUTO_DEPLOY_THRESHOLD: "10"
  FEEDBACK_LEARNING_RATE: "0.1"
  AWS_REGION: "us-east-1"

---
# Secret for sensitive data
apiVersion: v1
kind: Secret
metadata:
  name: quiz-secrets
  namespace: quiz-generator
type: Opaque
stringData:
  DATABASE_URL: "postgresql://quizuser:password@postgres-service:5432/quizdb"
  REDIS_URL: "redis://redis-service:6379/0"
  S3_BUCKET: "quiz-content-bucket"
  SLACK_WEBHOOK_URL: "https://hooks.slack.com/services/YOUR/WEBHOOK/URL"
  OPENAI_API_KEY: "sk-..."

---
# PostgreSQL Database
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: quiz-generator
spec:
  serviceName: postgres-service
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:14-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: quizdb
        - name: POSTGRES_USER
          value: quizuser
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: quiz-generator
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432

---
# Redis Cache
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: quiz-generator
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: redis-storage
          mountPath: /data
      volumes:
      - name: redis-storage
        emptyDir: {}

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: quiz-generator
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379

---
# Celery Worker Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery-worker
  namespace: quiz-generator
spec:
  replicas: 3  # Scale based on workload
  selector:
    matchLabels:
      app: celery-worker
  template:
    metadata:
      labels:
        app: celery-worker
    spec:
      containers:
      - name: worker
        image: your-registry/quiz-generator:latest
        command: ["celery", "-A", "autonomous_system", "worker", "--loglevel=info"]
        envFrom:
        - configMapRef:
            name: quiz-config
        - secretRef:
            name: quiz-secrets
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"

---
# Celery Beat Scheduler (single instance)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery-beat
  namespace: quiz-generator
spec:
  replicas: 1  # Must be exactly 1
  selector:
    matchLabels:
      app: celery-beat
  template:
    metadata:
      labels:
        app: celery-beat
    spec:
      containers:
      - name: beat
        image: your-registry/quiz-generator:latest
        command: ["celery", "-A", "autonomous_system", "beat", "--loglevel=info"]
        envFrom:
        - configMapRef:
            name: quiz-config
        - secretRef:
            name: quiz-secrets
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"

---
# API Service for health checks and monitoring
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-service
  namespace: quiz-generator
spec:
  replicas: 2
  selector:
    matchLabels:
      app: api-service
  template:
    metadata:
      labels:
        app: api-service
    spec:
      containers:
      - name: api
        image: your-registry/quiz-generator:latest
        command: ["python", "api_server.py"]
        ports:
        - containerPort: 8000
        envFrom:
        - configMapRef:
            name: quiz-config
        - secretRef:
            name: quiz-secrets
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5

---
# API Service
apiVersion: v1
kind: Service
metadata:
  name: api-service
  namespace: quiz-generator
spec:
  selector:
    app: api-service
  ports:
  - port: 80
    targetPort: 8000

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: quiz-ingress
  namespace: quiz-generator
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  tls:
  - hosts:
    - quiz-gen.yourdomain.com
    secretName: quiz-tls
  rules:
  - host: quiz-gen.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: api-service
            port:
              number: 80

---
# HorizontalPodAutoscaler for workers
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: worker-autoscaler
  namespace: quiz-generator
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: celery-worker
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# CronJob for backup (alternative to Celery beat for critical tasks)
apiVersion: batch/v1
kind: CronJob
metadata:
  name: daily-backup
  namespace: quiz-generator
spec:
  schedule: "0 2 * * *"  # 2 AM daily
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: backup
            image: your-registry/quiz-generator:latest
            command: ["python", "-c", "from autonomous_system import AutonomousQuizSystem; system = AutonomousQuizSystem(); system.backup_to_s3()"]
            envFrom:
            - configMapRef:
                name: quiz-config
            - secretRef:
                name: quiz-secrets
          restartPolicy: OnFailure
