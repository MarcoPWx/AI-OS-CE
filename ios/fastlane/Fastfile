# Fastlane configuration for iOS

default_platform(:ios)

platform :ios do
  before_all do
    ensure_git_status_clean
    git_pull
  end

  desc "Prepare and build the app for development"
  lane :dev do
    match(type: "development")
    build_app(
      workspace: "QuizMentor.xcworkspace",
      scheme: "QuizMentor",
      configuration: "Debug",
      export_method: "development"
    )
  end

  desc "Build and upload to TestFlight"
  lane :beta do
    # Ensure we have the latest code
    ensure_git_branch(branch: "main")
    
    # Increment build number
    increment_build_number(xcodeproj: "QuizMentor.xcodeproj")
    
    # Get certificates and profiles
    match(type: "appstore", readonly: true)
    
    # Build the app
    build_app(
      workspace: "QuizMentor.xcworkspace",
      scheme: "QuizMentor",
      configuration: "Release",
      clean: true,
      export_method: "app-store",
      export_options: {
        provisioningProfiles: {
          "com.quizmentor.app" => "QuizMentor AppStore"
        }
      }
    )
    
    # Upload to TestFlight
    upload_to_testflight(
      skip_waiting_for_build_processing: true,
      apple_id: "1234567890",
      team_id: "YOUR_TEAM_ID",
      groups: ["Beta Testers"],
      changelog: "Latest improvements and bug fixes"
    )
    
    # Send notification
    slack(
      message: "New TestFlight build available! ðŸš€",
      channel: "#ios-releases",
      success: true
    )
    
    # Commit the build number bump
    commit_version_bump(
      message: "Bump build number for TestFlight release [skip ci]",
      xcodeproj: "QuizMentor.xcodeproj"
    )
    
    push_to_git_remote
  end

  desc "Deploy to App Store"
  lane :release do
    # Ensure we're on the release branch
    ensure_git_branch(branch: "release/*")
    
    # Get certificates
    match(type: "appstore", readonly: true)
    
    # Build the app
    build_app(
      workspace: "QuizMentor.xcworkspace",
      scheme: "QuizMentor",
      configuration: "Release",
      clean: true,
      export_method: "app-store"
    )
    
    # Take screenshots
    capture_screenshots
    
    # Frame screenshots
    frame_screenshots(
      white: true,
      path: "./fastlane/screenshots"
    )
    
    # Upload to App Store Connect
    upload_to_app_store(
      force: true,
      skip_metadata: false,
      skip_screenshots: false,
      submit_for_review: false,
      automatic_release: false,
      app_version: get_version_number,
      metadata_path: "./fastlane/metadata",
      screenshots_path: "./fastlane/screenshots"
    )
    
    # Create a git tag
    add_git_tag(
      tag: "ios-v#{get_version_number}-#{get_build_number}"
    )
    
    push_to_git_remote(remote_branch: "main")
    
    # Notify team
    slack(
      message: "iOS app submitted to App Store! ðŸŽ‰",
      channel: "#releases",
      success: true
    )
  end

  desc "Create screenshots for all devices"
  lane :screenshots do
    capture_screenshots(
      workspace: "QuizMentor.xcworkspace",
      scheme: "QuizMentorUITests",
      devices: [
        "iPhone 15 Pro Max",
        "iPhone 15 Pro",
        "iPhone SE (3rd generation)",
        "iPad Pro (12.9-inch) (6th generation)",
        "iPad Pro (11-inch) (4th generation)"
      ],
      languages: ["en-US", "es-ES", "fr-FR", "de-DE", "ja"],
      clear_previous_screenshots: true,
      override_status_bar: true,
      output_directory: "./fastlane/screenshots"
    )
  end

  desc "Run all tests"
  lane :test do
    run_tests(
      workspace: "QuizMentor.xcworkspace",
      scheme: "QuizMentor",
      devices: ["iPhone 15"],
      code_coverage: true,
      output_directory: "./test_output",
      output_types: "html,junit"
    )
    
    # Upload test results to CI
    if ENV["CI"]
      trainer(output_directory: "./test_output")
    end
  end

  desc "Check code quality"
  lane :lint do
    swiftlint(
      mode: :lint,
      config_file: ".swiftlint.yml",
      ignore_exit_status: false
    )
  end

  desc "Setup certificates and profiles"
  lane :certificates do
    match(type: "development", force_for_new_devices: true)
    match(type: "appstore")
  end

  desc "Refresh dSYMs"
  lane :refresh_dsyms do
    download_dsyms(
      app_identifier: "com.quizmentor.app",
      team_id: "YOUR_TEAM_ID"
    )
    upload_symbols_to_crashlytics(
      dsym_path: "./QuizMentor.app.dSYM.zip"
    )
  end

  error do |lane, exception|
    slack(
      message: "Error in lane #{lane}: #{exception.message}",
      channel: "#ios-ci",
      success: false
    )
  end
end
