name: Deploy QuizMentor

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      deploy_target:
        description: 'Deploy target'
        required: true
        default: 'all'
        type: choice
        options:
          - web
          - api
          - mobile
          - all

env:
  NODE_VERSION: '20'
  EXPO_PUBLIC_API_URL: ${{ vars.EXPO_PUBLIC_API_URL }}

jobs:
  # Test and Lint
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test -- --coverage
      
      - name: Run linter
        run: npm run lint

  # Deploy Web to Vercel/DigitalOcean
  deploy-web:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Setup Expo
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}
      
      - name: Build Expo Web
        run: npx expo export:web
      
      # Deploy to Vercel
      - name: Deploy to Vercel
        if: vars.WEB_PLATFORM == 'vercel'
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./dist
          vercel-args: '--prod'
      
      # Deploy to DigitalOcean
      - name: Deploy to DigitalOcean
        if: vars.WEB_PLATFORM == 'digitalocean'
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        run: |
          doctl apps create --spec .do/expo-app.yaml --wait

  # Deploy API to DigitalOcean
  deploy-api:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      
      - name: Build API Docker image
        run: docker build -t quizmentor-api ./api
      
      - name: Push to DigitalOcean Registry
        run: |
          doctl registry login
          docker tag quizmentor-api registry.digitalocean.com/${{ secrets.DO_REGISTRY }}/api:${{ github.sha }}
          docker tag quizmentor-api registry.digitalocean.com/${{ secrets.DO_REGISTRY }}/api:latest
          docker push registry.digitalocean.com/${{ secrets.DO_REGISTRY }}/api:${{ github.sha }}
          docker push registry.digitalocean.com/${{ secrets.DO_REGISTRY }}/api:latest
      
      - name: Deploy to App Platform
        run: |
          doctl apps update ${{ secrets.DO_APP_ID }} --spec .do/app-simplified.yaml

  # Build Mobile Apps with EAS
  build-mobile:
    needs: test
    if: github.ref == 'refs/heads/main' && (github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, '[deploy mobile]'))
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [ios, android]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Setup Expo and EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}
      
      - name: Build ${{ matrix.platform }}
        run: |
          eas build --platform ${{ matrix.platform }} \
            --profile production \
            --non-interactive \
            --wait
      
      - name: Submit to Store
        if: contains(github.event.head_commit.message, '[submit]')
        run: |
          eas submit --platform ${{ matrix.platform }} --latest

  # Send OTA Update
  ota-update:
    needs: test
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[ota]')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Setup Expo and EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}
      
      - name: Create and publish update
        run: |
          COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
          MESSAGE=$(echo "$COMMIT_MESSAGE" | sed 's/\[ota\]//' | xargs)
          eas update --branch production --message "$MESSAGE" --non-interactive

  # A/B Testing Deployment
  canary-deploy:
    needs: test
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[canary]')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy Canary Version
        run: |
          echo "Deploying canary version with feature flags enabled"
          # Update feature flags in PostHog
          curl -X PATCH https://app.posthog.com/api/projects/${{ secrets.POSTHOG_PROJECT_ID }}/feature_flags/ \
            -H "Authorization: Bearer ${{ secrets.POSTHOG_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{"key": "new-algorithm", "rollout_percentage": 10}'

  # Database Migrations
  migrate-db:
    needs: [deploy-api]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run database migrations
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          cd api
          npm ci
          npm run migrate:prod

  # Monitoring and Alerts Setup
  setup-monitoring:
    needs: [deploy-web, deploy-api]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Configure Sentry Release
        run: |
          curl -sL https://sentry.io/get-cli/ | bash
          sentry-cli releases new ${{ github.sha }}
          sentry-cli releases set-commits ${{ github.sha }} --auto
          sentry-cli releases finalize ${{ github.sha }}
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
      
      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'QuizMentor deployed to production! ðŸš€'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: success()
