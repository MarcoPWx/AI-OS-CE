# Fastlane configuration for Android

default_platform(:android)

platform :android do
  before_all do
    ensure_git_status_clean
    git_pull
  end

  desc "Build debug APK"
  lane :dev do
    gradle(
      task: "clean assembleDebug",
      project_dir: "./",
      print_command: false,
      properties: {
        "android.injected.signing.store.file" => "debug.keystore",
        "android.injected.signing.store.password" => "android",
        "android.injected.signing.key.alias" => "androiddebugkey",
        "android.injected.signing.key.password" => "android"
      }
    )
    
    apk_path = lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
    UI.success("Debug APK built: #{apk_path}")
  end

  desc "Build and deploy to internal testing track"
  lane :beta do
    # Ensure we're on main branch
    ensure_git_branch(branch: "main")
    
    # Increment version code
    increment_version_code(
      gradle_file_path: "app/build.gradle"
    )
    
    # Build release bundle
    gradle(
      task: "clean bundleRelease",
      project_dir: "./",
      print_command: false,
      properties: {
        "android.injected.signing.store.file" => ENV["KEYSTORE_PATH"],
        "android.injected.signing.store.password" => ENV["KEYSTORE_PASSWORD"],
        "android.injected.signing.key.alias" => ENV["KEY_ALIAS"],
        "android.injected.signing.key.password" => ENV["KEY_PASSWORD"]
      }
    )
    
    # Upload to Play Store internal track
    upload_to_play_store(
      track: "internal",
      release_status: "completed",
      skip_upload_metadata: true,
      skip_upload_images: true,
      skip_upload_screenshots: true,
      aab: lane_context[SharedValues::GRADLE_AAB_OUTPUT_PATH],
      json_key: "./google-play-service-account.json",
      package_name: "com.quizmentor.app"
    )
    
    # Send notification
    slack(
      message: "New Android beta available on internal testing! ðŸ¤–",
      channel: "#android-releases",
      success: true
    )
    
    # Commit version bump
    git_commit(
      path: ["app/build.gradle"],
      message: "Bump version code for beta release [skip ci]"
    )
    
    push_to_git_remote
  end

  desc "Deploy to Google Play Store"
  lane :release do
    # Ensure we're on release branch
    ensure_git_branch(branch: "release/*")
    
    # Build release bundle
    gradle(
      task: "clean bundleRelease",
      project_dir: "./",
      print_command: false,
      properties: {
        "android.injected.signing.store.file" => ENV["KEYSTORE_PATH"],
        "android.injected.signing.store.password" => ENV["KEYSTORE_PASSWORD"],
        "android.injected.signing.key.alias" => ENV["KEY_ALIAS"],
        "android.injected.signing.key.password" => ENV["KEY_PASSWORD"]
      }
    )
    
    # Capture screenshots
    capture_android_screenshots
    
    # Upload to Play Store production track
    upload_to_play_store(
      track: "production",
      release_status: "draft",
      rollout: "0.1", # 10% rollout
      skip_upload_metadata: false,
      skip_upload_images: false,
      skip_upload_screenshots: false,
      aab: lane_context[SharedValues::GRADLE_AAB_OUTPUT_PATH],
      json_key: "./google-play-service-account.json",
      package_name: "com.quizmentor.app",
      metadata_path: "./fastlane/metadata/android",
      screenshots_path: "./fastlane/screenshots"
    )
    
    # Create git tag
    add_git_tag(
      tag: "android-v#{get_version_name}-#{get_version_code}"
    )
    
    push_to_git_remote(remote_branch: "main")
    
    # Notify team
    slack(
      message: "Android app submitted to Play Store! ðŸŽ‰",
      channel: "#releases",
      success: true
    )
  end

  desc "Promote from internal to alpha track"
  lane :promote_to_alpha do
    upload_to_play_store(
      track: "internal",
      track_promote_to: "alpha",
      json_key: "./google-play-service-account.json",
      package_name: "com.quizmentor.app",
      skip_upload_apk: true,
      skip_upload_aab: true,
      skip_upload_metadata: true,
      skip_upload_images: true,
      skip_upload_screenshots: true
    )
  end

  desc "Promote from alpha to production"
  lane :promote_to_production do
    upload_to_play_store(
      track: "alpha",
      track_promote_to: "production",
      rollout: "0.1", # Start with 10% rollout
      json_key: "./google-play-service-account.json",
      package_name: "com.quizmentor.app",
      skip_upload_apk: true,
      skip_upload_aab: true
    )
  end

  desc "Run unit tests"
  lane :test do
    gradle(
      task: "test",
      project_dir: "./"
    )
    
    # Run instrumentation tests on Firebase Test Lab
    if ENV["CI"]
      run_tests_firebase_test_lab(
        project_id: "quizmentor-firebase",
        app_apk: "./app/build/outputs/apk/debug/app-debug.apk",
        android_test_apk: "./app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk",
        devices: [
          {
            model: "Pixel2",
            version: "28"
          },
          {
            model: "Nexus6P",
            version: "27"
          }
        ]
      )
    end
  end

  desc "Check code quality"
  lane :lint do
    gradle(
      task: "ktlintCheck",
      project_dir: "./"
    )
    
    gradle(
      task: "lint",
      project_dir: "./"
    )
  end

  desc "Capture screenshots for all devices"
  lane :screenshots do
    capture_android_screenshots(
      locales: ["en-US", "es-ES", "fr-FR", "de-DE", "ja"],
      clear_previous_screenshots: true,
      app_apk_path: "./app/build/outputs/apk/debug/app-debug.apk",
      tests_apk_path: "./app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk"
    )
    
    # Frame screenshots
    frame_screenshots(
      android: true,
      path: "./fastlane/screenshots"
    )
  end

  desc "Update version name and code"
  lane :bump_version do |options|
    if options[:type] == "major" || options[:type] == "minor" || options[:type] == "patch"
      increment_version_name(
        gradle_file_path: "app/build.gradle",
        bump_type: options[:type]
      )
    end
    
    increment_version_code(
      gradle_file_path: "app/build.gradle"
    )
    
    version_name = get_version_name
    version_code = get_version_code
    
    git_commit(
      path: ["app/build.gradle"],
      message: "Bump version to #{version_name} (#{version_code})"
    )
  end

  desc "Clean build artifacts"
  lane :clean do
    gradle(
      task: "clean",
      project_dir: "./"
    )
    
    sh("rm -rf ./app/build")
  end

  # Helper methods
  def get_version_name
    gradle_file = File.read("app/build.gradle")
    version_name = gradle_file.match(/versionName\s+"(.+)"/)[1]
    version_name
  end

  def get_version_code
    gradle_file = File.read("app/build.gradle")
    version_code = gradle_file.match(/versionCode\s+(\d+)/)[1]
    version_code
  end

  error do |lane, exception|
    slack(
      message: "Error in lane #{lane}: #{exception.message}",
      channel: "#android-ci",
      success: false
    )
  end
end
